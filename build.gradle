plugins {
    id 'java-library'
}

def versionObj = new Version(major: 0, minor: 0, revision: 2)
group 'bot.bricolo.granite'
version versionObj.toString()

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    api 'org.slf4j:slf4j-api:1.7.25'
    compileOnly 'net.dv8tion:JDA:4.BETA.0_30'
    compileOnly 'com.github.mewna:catnip:1.0.1'
    implementation 'org.json:json:20180813'
    implementation 'com.sedmelluq:lavaplayer:1.3.11'
    implementation 'com.squareup.okhttp3:okhttp:3.13.1'
    implementation 'org.java-websocket:Java-WebSocket:1.4.0'
}

import org.apache.tools.ant.filters.ReplaceTokens

//noinspection GroovyAssignabilityCheck
task sourcesForRelease(type: Copy) {
    outputs.upToDateWhen { false }

    from('src/main/java') {
        include '**/Version.java'
        filter(ReplaceTokens, tokens: [
                VERSION_MAJOR   : versionObj.major,
                VERSION_MINOR   : versionObj.minor,
                VERSION_REVISION: versionObj.revision,
                COMMIT          : getCommitHash(),
        ])
    }
    into 'build/filteredSrc'

    includeEmptyDirs = false
}

//noinspection GroovyAssignabilityCheck
task generateJavaSources(type: SourceTask) {
    outputs.upToDateWhen { false }

    def javaSources = sourceSets.main.allJava.filter {
        it.name != 'Version.java'
    }
    source = javaSources + sourcesForRelease.destinationDir

    dependsOn sourcesForRelease
}

compileJava {
    outputs.upToDateWhen { false }

    source = generateJavaSources.source
    dependsOn generateJavaSources
}

class Version {
    String major, minor, revision

    String toString() {
        "$major.$minor.$revision"
    }
}

static def getCommitHash() {
    def p = Runtime.getRuntime().exec("git rev-parse HEAD")
    p.waitFor()
    p.getIn().text.trim()
}
